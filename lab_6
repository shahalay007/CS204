#include<bits/stdc++.h>
#define rl long long
using namespace std;
struct tree{
	rl us;
	rl ch;
	tree* l;
	tree* r;
	rl h;
};
tree* root=NULL;
rl max_val[2]= {0,-1};
tree* newNode(rl a,rl b){
	tree* newnode=new tree();
	newnode->us=a;
	newnode->l=NULL;
	newnode->r=NULL;
	newnode->h=1;
	newnode->ch=b;
	return newnode;
}

  rl height(tree *n)
{
    if (n == NULL)  return 0;
    else return n->h;
}


tree* rightRotate(tree *y)
{
    tree *x = y->l;
    tree *T2 = x->r;

    x->r = y;
    y->l = T2;

    y->h = max(height(y->l),
                    height(y->r)) + 1;
    x->h = max(height(x->l),
                    height(x->r)) + 1;

    return x;
}

tree *leftRotate(tree *x)
{
    tree *y = x->r;
    tree *T2 = y->l;
    y->l = x;
    x->r = T2;
    x->h = max(height(x->l),
                    height(x->r)) + 1;
    y->h = max(height(y->l),
                    height(y->r)) + 1;

    return y;
}

rl getBalance(tree *n)
{
    if (n == NULL)
        return 0;
    return height(n->l) - height(n->r);
}

tree* insert(tree* tree, rl k, rl c)
{

    if (tree == NULL)
        return(newNode(k,c));

    if (k < tree->us)
        tree->l = insert(tree->l, k,c);
    else if (k > tree->us)  tree->r = insert(tree->r, k,c);
    else return tree;


    tree->h = 1 + max(height(tree->l),
                        height(tree->r));

    rl balance = getBalance(tree);

    if (balance > 1 && k < tree->l->us)
        return rightRotate(tree);


    if (balance < -1 && k > tree->r->us)
        return leftRotate(tree);


    if (balance > 1 && k > tree->l->us)
    {
        tree->l = leftRotate(tree->l);
        return rightRotate(tree);
    }

    if (balance < -1 && k < tree->r->us)
    {
        tree->r = rightRotate(tree->r);
        return leftRotate(tree);
    }
    return tree;
}

tree* search1(tree* rt,rl a)
{
	if(rt==NULL) return NULL;
	if(a==rt->us) return rt;
	else if(a< rt->us) return search1(rt->l,k);
	else return search1(rt->r,a);
}

void free1(tree* root)
{	if(root ==NULL) return;
	free1(root->l);
	free1(root->r);
	delete(root);
}

int main()
{
	rl m;
	cin>>m;
	rl q;
	cin>>q;
	while(q--)
	{
		rl x,y,z;
			cin>>z;
			if(x==1)
			{	cin>>y>>z;
				tree* tree=search1(root,y);
				if(tree!=NULL)
				{
					tree->ch=tree->ch+z;
					if(tree->ch>=max_val[1])
					{
						max_val[0]=tree->us;
						max_val[1]=tree->ch;
					}

				}else{
					root=insert(root,y,z);
					tree=search1(root,y);
					if(tree->ch>=max_val[1])
					{
						max_val[1]=tree->ch;
						max_val[0]=tree->us;
					}
				}
			}
			else if(x==2){
				if(root==NULL) cout<<"No data available."<<endl;
				else cout<<max_val[0]<<endl;
			}
		}
	free1(root);
	}
